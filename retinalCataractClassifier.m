function [y1] = retinalCataractClassifier(x1)
%RETINALCATARACTCLASSIFIER neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 13-Feb-2018 12:44:02.
% 
% [y1] = retinalCataractClassifier(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.4817;0.4155;0.3447;0.8008];
x1_step1.gain = [0.994530084535057;4.60087416609156;6.6711140760507;18.0505415162455];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9922833585103496556;0.30644870324369660741;1.2905475053127968277;-1.5532079541490406704;0.048155044700056999496;0.78027656862249439307;-1.397173208379311582;-0.51495796366343393746;-1.5296468740481805604;3.0434747902304670752];
IW1_1 = [-1.3997046530763430638 -0.60795148835426993106 -1.6509465808580008339 1.6183727839398267534;-1.9155292202674829571 -1.68331876967084626 -0.16018075495524838892 -2.7523064448090548417;-4.3343450815717128322 -1.544363741859598127 1.3928569204957672589 -0.15211629788887423564;1.4291266061971863444 -0.1494267367763550125 1.8378309779460735296 0.6645659462202803125;-1.263626429298181586 -0.84853214320045522445 -0.88768280185327308462 -2.2983794774243513359;-1.1709843106542237035 0.95406884368616529102 -1.3531029638978337992 -0.90458816091319893538;-3.2589042411379471886 0.24531442409491996393 -0.55652629917043006103 1.8622926026019639423;-1.1477297436145719178 -0.078045473118744365659 3.9719191987630924068 -0.24862394213809357879;-3.3224548519642023159 -0.42735152390579267401 -0.25298984575986843693 1.5121627052995683105;1.0659869262621834984 -0.36396115083094549014 -1.0303561973509429706 1.3653193894639015227];

% Layer 2
b2 = [0.31897698675476687802;0.42935747616196073828;0.22392397139161082653];
LW2_1 = [0.67930734331686248861 1.9306687282723664634 1.929008698665044319 0.4695345191792929529 1.4651721984497625417 -0.044005499059064284717 -2.8639150824902301906 2.5689333943586385445 -1.9078066991347819581 -0.026340816541722537891;0.50187001256489749412 -0.25552942903874648062 0.7407209348480991995 -1.4302894998876269916 -0.991437606325233034 1.5572105289023778774 2.6177848069563869338 1.0863404026189140694 1.7839507884974099561 -0.81009670893439444939;-0.6279623304240214976 -1.3836940713693794969 -3.3110295083187781806 0.86862137818566054204 -1.1484188013582237176 0.33434905354326066584 -2.3283804346940257801 -1.8051246447915285653 -0.94582213733727704685 0.010487505225241274681];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
